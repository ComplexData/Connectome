ifnb.list[[i]] <- ScaleData(ifnb.list[[i]],features = genes)
ifnb.con[[i]] <- CreateConnectome(ifnb.list[[i]],species = 'human',min.cells.per.ident = 75,p.values = F,calculate.DOR = F)
}
View(ifnb.con)
ifnb.con <- list()
for (i in 1:length(ifnb.list)){
ifnb.list[[i]] <- NormalizeData(ifnb.list[[i]])
ifnb.list[[i]] <- ScaleData(ifnb.list[[i]],features = genes)
ifnb.con[[i]] <- CreateConnectome(ifnb.list[[i]],species = 'human',p.values = F,calculate.DOR = F)
)
ifnb.con <- list()
for (i in 1:length(ifnb.list)){
ifnb.list[[i]] <- NormalizeData(ifnb.list[[i]])
ifnb.list[[i]] <- ScaleData(ifnb.list[[i]],features = genes)
ifnb.con[[i]] <- CreateConnectome(ifnb.list[[i]],species = 'human',p.values = F,calculate.DOR = F)}
View(ifnb.con)
?DifferentialConnectome
names(ifnb.list)
names(ifnb.con.list) <- names(ifnb.list)
names(ifnb.con) <- names(ifnb.list)
nameS(ifnb.con)
names(ifnb.con)
diff <- DifferentialConnectome(ifnb.con[[1]],ifnb.con[[2]])
DifferentialScoringPlot(diff,min.score = 10,min.pct = 0.1,infinity.to.max = T)
?DifferentialScoringPlot
DifferentialScoringPlot(diff,min.score = 10,min.pct = 0.1,infinity.to.max = T)
# Load in Seurat Differential Demo data
require(SeuratData)
# Load in Seurat Differential Demo data
require(SeuratData)
InstallData('ifnb')
data('ifnb')
table(Idents(ifnb))
Idents(ifnb) <- ifnb[['seurat8_annotations']]
table(Idents(ifnb))
# Split by condition
ifnb.list <- SplitObject(ifnb,split.by = 'stim')
#  Make connectomes
ifnb.con.list <- list()
for (i in 1:length(ifnb.list)){
ifnb.list[[i]] <- ScaleData(ifnb.list[[i]],features = rownames(ifnb.list[[i]]))
ifnb.con.list[[i]] <- CreateConnectome(ifnb.list[[i]],species = 'human',p.values = F)
}
names(ifnb.con.list) <- names(ifnb.list)
# Make differential connectome
diff <- DifferentialConnectome(ifnb.con.list[[1]],ifnb.con.list[[2]])
#  Make connectomes
ifnb.con.list <- list()
for (i in 1:length(ifnb.list)){
ifnb.list[[i]] <- ScaleData(ifnb.list[[i]],features = rownames(ifnb.list[[i]]))
ifnb.con.list[[i]] <- CreateConnectome(ifnb.list[[i]],species = 'human',p.values = F)
}
names(ifnb.con.list) <- names(ifnb.list)
# Make differential connectome
diff <- DifferentialConnectome(ifnb.con.list[[1]],ifnb.con.list[[2]])
View(ifnb.con.list)
Idents(ifnb) <- ifnb[['seurat_annotations']]
table(Idents(ifnb))
# Split by condition
ifnb.list <- SplitObject(ifnb,split.by = 'stim')
#  Make connectomes
ifnb.con.list <- list()
for (i in 1:length(ifnb.list)){
ifnb.list[[i]] <- ScaleData(ifnb.list[[i]],features = rownames(ifnb.list[[i]]))
ifnb.con.list[[i]] <- CreateConnectome(ifnb.list[[i]],species = 'human',p.values = F)
}
names(ifnb.con.list) <- names(ifnb.list)
# Make differential connectome
diff <- DifferentialConnectome(ifnb.con.list[[1]],ifnb.con.list[[2]])
# Initial Scoring Plot
pdf(file = 'Scoring Plot Demo.pdf',width = 50,height=8)
DifferentialScoringPlot(diff,min.score = 10,min.pct = 0.1,infinity.to.max = T)
dev.off()
DifferentialScoringPlot(diff,min.score = 10,min.pct = 0.1,infinity.to.max = T)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(Seurat)
library(SeuratData)
library(connectome)
library(ggplot2)
library(cowplot)
InstallData('ifnb')
data('ifnb')
table(Idents(ifnb))
Idents(ifnb) <- ifnb[['seurat_annotations']]
table(Idents(ifnb))
# First identify ligands and receptors which have mapped in the dataset:
connectome.genes <- union(connectome::ncomms8866_human$Ligand.ApprovedSymbol,connectome::ncomms8866_human$Receptor.ApprovedSymbol)
genes <- connectome.genes[connectome.genes %in% rownames(ifnb)]
# Split the object by condition:
ifnb.list <- SplitObject(ifnb,split.by = 'stim')
# Normalize, Scale, and create Connectome:
ifnb.con.list <- list()
for (i in 1:length(ifnb.list)){
ifnb.list[[i]] <- NormalizeData(ifnb.list[[i]])
ifnb.list[[i]] <- ScaleData(ifnb.list[[i]],features = rownames(ifnb.list[[i]]))
ifnb.con.list[[i]] <- CreateConnectome(ifnb.list[[i]],species = 'human',p.values = F)
}
names(ifnb.con.list) <- names(ifnb.list)
diff <- DifferentialConnectome(ifnb.con.list[[1]],ifnb.con.list[[2]])
DifferentialScoringPlot(diff,min.score = 10,min.pct = 0.1,infinity.to.max = T)
?DifferentialScoringPlot
DifferentialScoringPlot(diff,min.score = 10,min.pct = 0.1,infinity.to.max = T)
#  Make connectomes
ifnb.con.list <- list()
for (i in 1:length(ifnb.list)){
ifnb.list[[i]] <- ScaleData(ifnb.list[[i]],features = rownames(ifnb.list[[i]]))
ifnb.con.list[[i]] <- CreateConnectome(ifnb.list[[i]],species = 'human',p.values = F)
}
names(ifnb.con.list) <- names(ifnb.list)
# Make differential connectome
diff <- DifferentialConnectome(ifnb.con.list[[1]],ifnb.con.list[[2]])
# Initial Scoring Plot
pdf(file = 'Scoring Plot Demo.pdf',width = 50,height=8)
DifferentialScoringPlot(diff,min.score = 10,min.pct = 0.1,infinity.to.max = T)
dev.off()
features = NULL
sources.include = NULL
targets.include = NULL
min.score = NULL
min.pct = NULL
verbose = T
infinity.to.max = T
differential.connectome <- diff
require(ggplot2)
require(cowplot)
require(dplyr)
data <- differential.connectome
pre.filter <- nrow(data)
# Setup vector column
data$vector <- paste(data$source,data$target,sep = ' - ')
# Subset based on min.score
if (!is.null(min.score)){
data <- subset(data,score > min.score)
}
# Subset on nodes (cell types) of interest
if (!is.null(sources.include)){
data <- subset(data, source %in% sources.include)
}
if (!is.null(targets.include)){
data <- subset(data, target %in% targets.include)
}
# Subset on features of interest
if (!is.null(features)){
data <- subset(data,ligand %in% features | receptor %in% features)
}
# Subset based on min.pct
if (!is.null(min.pct)){
data <- subset(data,pct.source.1 > min.pct | pct.source.2 > min.pct)
data <- subset(data, pct.target.1 > min.pct | pct.target.2 > min.pct)
}
# Postfilter
post.filter <- nrow(data)
if (verbose){
message(paste("\nPre-filter edges: ",as.character(pre.filter)))
message(paste("\nPost-filter edges: ",as.character(post.filter)))
message("\nConnectome filtration completed")
}
# Set 'Inf' values to a maximum score
if (infinity.to.max == T){
if (length(data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc) > 0){
data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc <- max(data[data$ligand.norm.lfc != 'Inf',]$ligand.norm.lfc)*1.01
}
if (length(data[data$recept.norm.lfc == 'Inf',]$recept.norm.lfc) > 0){
data[data$recept.norm.lfc == 'Inf',]$recept.norm.lfc <- max(data[data$recept.norm.lfc != 'Inf',]$recept.norm.lfc)*1.01
}
if (length(data[data$score == 'Inf',]$score) > 0){
data[data$score == 'Inf',]$score <- max(data[data$score != 'Inf',]$score)*1.01
}
if (length(data[data$ligand.norm.lfc == '-Inf',]$ligand.norm.lfc) > 0){
data[data$ligand.norm.lfc == '-Inf',]$ligand.norm.lfc <- min(data[data$ligand.norm.lfc != '-Inf',]$ligand.norm.lfc)*1.01
}
if (length(data[data$recept.norm.lfc == '-Inf',]$recept.norm.lfc) > 0){
data[data$recept.norm.lfc == '-Inf',]$recept.norm.lfc <- min(data[data$recept.norm.lfc != '-Inf',]$recept.norm.lfc)*1.01
}
if (length(data[data$score == '-Inf',]$score) > 0){
data[data$score == '-Inf',]$score <- min(data[data$score != '-Inf',]$score)*1.01
}
}
p1 <- ggplot(data,aes(x = vector, y = pair)) +
geom_tile(aes(fill = ligand.norm.lfc )) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_gradient2(low="blue",mid = 'grey',high="red",midpoint = 0) + ggtitle('Ligand Log2 Fold Change')
p2 <- ggplot(data,aes(x = vector, y = pair)) +
geom_tile(aes(fill = recept.norm.lfc )) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_gradient2(low="blue",mid = 'grey',high="red",midpoint = 0) + ggtitle('Receptor Log2 Fold Change')
p3 <- ggplot(data,aes(x = vector, y = pair)) +
geom_tile(aes(fill = score )) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_gradient2(low="blue",mid = 'grey',high="red",midpoint = 0) + ggtitle('Perturbation Score')
plot_grid(p1,p2,p3,nrow = 1)
min.score = 10
min.pct = 0.1
DifferentialScoringPlot(diff,min.score = 10,min.pct = 0.1,infinity.to.max = T)
require(ggplot2)
require(cowplot)
require(dplyr)
data <- differential.connectome
pre.filter <- nrow(data)
# Setup vector column
data$vector <- paste(data$source,data$target,sep = ' - ')
# Subset based on min.score
if (!is.null(min.score)){
data <- subset(data,score > min.score)
}
# Subset on nodes (cell types) of interest
if (!is.null(sources.include)){
data <- subset(data, source %in% sources.include)
}
if (!is.null(targets.include)){
data <- subset(data, target %in% targets.include)
}
# Subset on features of interest
if (!is.null(features)){
data <- subset(data,ligand %in% features | receptor %in% features)
}
# Subset based on min.pct
if (!is.null(min.pct)){
data <- subset(data,pct.source.1 > min.pct | pct.source.2 > min.pct)
data <- subset(data, pct.target.1 > min.pct | pct.target.2 > min.pct)
}
# Postfilter
post.filter <- nrow(data)
if (verbose){
message(paste("\nPre-filter edges: ",as.character(pre.filter)))
message(paste("\nPost-filter edges: ",as.character(post.filter)))
message("\nConnectome filtration completed")
}
# Set 'Inf' values to a maximum score
if (infinity.to.max == T){
if (length(data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc) > 0){
data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc <- max(data[data$ligand.norm.lfc != 'Inf',]$ligand.norm.lfc)*1.01
}
if (length(data[data$recept.norm.lfc == 'Inf',]$recept.norm.lfc) > 0){
data[data$recept.norm.lfc == 'Inf',]$recept.norm.lfc <- max(data[data$recept.norm.lfc != 'Inf',]$recept.norm.lfc)*1.01
}
if (length(data[data$score == 'Inf',]$score) > 0){
data[data$score == 'Inf',]$score <- max(data[data$score != 'Inf',]$score)*1.01
}
if (length(data[data$ligand.norm.lfc == '-Inf',]$ligand.norm.lfc) > 0){
data[data$ligand.norm.lfc == '-Inf',]$ligand.norm.lfc <- min(data[data$ligand.norm.lfc != '-Inf',]$ligand.norm.lfc)*1.01
}
if (length(data[data$recept.norm.lfc == '-Inf',]$recept.norm.lfc) > 0){
data[data$recept.norm.lfc == '-Inf',]$recept.norm.lfc <- min(data[data$recept.norm.lfc != '-Inf',]$recept.norm.lfc)*1.01
}
if (length(data[data$score == '-Inf',]$score) > 0){
data[data$score == '-Inf',]$score <- min(data[data$score != '-Inf',]$score)*1.01
}
}
if (length(data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc) > 0){
data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc <- max(data[data$ligand.norm.lfc != 'Inf',]$ligand.norm.lfc)*1.01
}
length(data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc
)
if (length(data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc) > 0)
)
length(data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc) > 0
if (length(data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc) > 0){
data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc <- max(data[data$ligand.norm.lfc != 'Inf',]$ligand.norm.lfc)*1.01
}
length(data[data$recept.norm.lfc == 'Inf',]$recept.norm.lfc) > 0
if (length(data[data$recept.norm.lfc == 'Inf',]$recept.norm.lfc) > 0){
data[data$recept.norm.lfc == 'Inf',]$recept.norm.lfc <- max(data[data$recept.norm.lfc != 'Inf',]$recept.norm.lfc)*1.01
}
if (length(data[data$score == 'Inf',]$score) > 0){
data[data$score == 'Inf',]$score <- max(data[data$score != 'Inf',]$score)*1.01
}
length(data[data$score == 'Inf',]$score) > 0
if (length(data[data$score == 'Inf',]$score) > 0){
data[data$score == 'Inf',]$score <- max(data[data$score != 'Inf',]$score)*1.01
}
max(data[data$score != 'Inf',]$score
)
max(data[data$score != 'Inf',]$score)
require(ggplot2)
require(cowplot)
require(dplyr)
data <- differential.connectome
pre.filter <- nrow(data)
# Setup vector column
data$vector <- paste(data$source,data$target,sep = ' - ')
# Subset based on min.score
if (!is.null(min.score)){
data <- subset(data,score > min.score)
}
# Subset on nodes (cell types) of interest
if (!is.null(sources.include)){
data <- subset(data, source %in% sources.include)
}
if (!is.null(targets.include)){
data <- subset(data, target %in% targets.include)
}
# Subset on features of interest
if (!is.null(features)){
data <- subset(data,ligand %in% features | receptor %in% features)
}
# Subset based on min.pct
if (!is.null(min.pct)){
data <- subset(data,pct.source.1 > min.pct | pct.source.2 > min.pct)
data <- subset(data, pct.target.1 > min.pct | pct.target.2 > min.pct)
}
# Postfilter
post.filter <- nrow(data)
if (verbose){
message(paste("\nPre-filter edges: ",as.character(pre.filter)))
message(paste("\nPost-filter edges: ",as.character(post.filter)))
message("\nConnectome filtration completed")
}
View(data)
infinity.to.max == T
if (length(data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc) > 0){
data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc <- max(data[data$ligand.norm.lfc != 'Inf',]$ligand.norm.lfc)*1.01
}
data <- differential.connectome
pre.filter <- nrow(data)
# Setup vector column
data$vector <- paste(data$source,data$target,sep = ' - ')
# Subset based on min.score
if (!is.null(min.score)){
data <- subset(data,score > min.score)
}
# Subset on nodes (cell types) of interest
if (!is.null(sources.include)){
data <- subset(data, source %in% sources.include)
}
if (!is.null(targets.include)){
data <- subset(data, target %in% targets.include)
}
# Subset on features of interest
if (!is.null(features)){
data <- subset(data,ligand %in% features | receptor %in% features)
}
# Subset based on min.pct
if (!is.null(min.pct)){
data <- subset(data,pct.source.1 > min.pct | pct.source.2 > min.pct)
data <- subset(data, pct.target.1 > min.pct | pct.target.2 > min.pct)
}
# Postfilter
post.filter <- nrow(data)
if (verbose){
message(paste("\nPre-filter edges: ",as.character(pre.filter)))
message(paste("\nPost-filter edges: ",as.character(post.filter)))
message("\nConnectome filtration completed")
}
length(data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc) > 0
length(data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc)
data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc
max(data[data$ligand.norm.lfc != 'Inf',]$ligand.norm.lfc)
data[data$ligand.norm.lfc != 'Inf',]$ligand.norm.lfc
is.finite(data$ligand.norm.lfc)
data <- differential.connectome
pre.filter <- nrow(data)
# Setup vector column
data$vector <- paste(data$source,data$target,sep = ' - ')
# Subset based on min.score
if (!is.null(min.score)){
data <- subset(data,score > min.score)
}
View(data)
min.score
min.score = 2
data <- differential.connectome
pre.filter <- nrow(data)
# Setup vector column
data$vector <- paste(data$source,data$target,sep = ' - ')
View(data)
# Subset based on min.score
if (!is.null(min.score)){
data <- subset(data,score > min.score)
}
# Subset on nodes (cell types) of interest
if (!is.null(sources.include)){
data <- subset(data, source %in% sources.include)
}
if (!is.null(targets.include)){
data <- subset(data, target %in% targets.include)
}
# Subset on features of interest
if (!is.null(features)){
data <- subset(data,ligand %in% features | receptor %in% features)
}
# Subset based on min.pct
if (!is.null(min.pct)){
data <- subset(data,pct.source.1 > min.pct | pct.source.2 > min.pct)
data <- subset(data, pct.target.1 > min.pct | pct.target.2 > min.pct)
}
# Postfilter
post.filter <- nrow(data)
if (verbose){
message(paste("\nPre-filter edges: ",as.character(pre.filter)))
message(paste("\nPost-filter edges: ",as.character(post.filter)))
message("\nConnectome filtration completed")
}
is.finite(data$ligand.norm.lfc)
data[is.finite(data$ligand.norm.lfc),]
data[is.finite(data$ligand.norm.lfc),]$ligand.norm.lfc
if (length(data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc) > 0){
data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc <- max(data[is.finite(data$ligand.norm.lfc),]$ligand.norm.lfc)*1.01
}
data[data$recept.norm.lfc == 'Inf',]$recept.norm.lfc <- max(data[is.finite(data$recept.norm.lfc),]$recept.norm.lfc)*1.01
if (length(data[data$recept.norm.lfc == 'Inf',]$recept.norm.lfc) > 0){
data[data$recept.norm.lfc == 'Inf',]$recept.norm.lfc <- max(data[is.finite(data$recept.norm.lfc),]$recept.norm.lfc)*1.01
}
if (length(data[data$score == 'Inf',]$score) > 0){
data[data$score == 'Inf',]$score <- max(data[is.finite(data$score),]$score)*1.01
}
DifferentialScoringPlot <- function(differential.connectome,
features = NULL,
sources.include = NULL,
targets.include = NULL,
min.score = NULL,
min.pct = NULL,
verbose = T,
infinity.to.max = T){
require(ggplot2)
require(cowplot)
require(dplyr)
data <- differential.connectome
pre.filter <- nrow(data)
# Setup vector column
data$vector <- paste(data$source,data$target,sep = ' - ')
# Subset based on min.score
if (!is.null(min.score)){
data <- subset(data,score > min.score)
}
# Subset on nodes (cell types) of interest
if (!is.null(sources.include)){
data <- subset(data, source %in% sources.include)
}
if (!is.null(targets.include)){
data <- subset(data, target %in% targets.include)
}
# Subset on features of interest
if (!is.null(features)){
data <- subset(data,ligand %in% features | receptor %in% features)
}
# Subset based on min.pct
if (!is.null(min.pct)){
data <- subset(data,pct.source.1 > min.pct | pct.source.2 > min.pct)
data <- subset(data, pct.target.1 > min.pct | pct.target.2 > min.pct)
}
# Postfilter
post.filter <- nrow(data)
if (verbose){
message(paste("\nPre-filter edges: ",as.character(pre.filter)))
message(paste("\nPost-filter edges: ",as.character(post.filter)))
message("\nConnectome filtration completed")
}
# Set 'Inf' values to a maximum score
if (infinity.to.max == T){
if (length(data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc) > 0){
data[data$ligand.norm.lfc == 'Inf',]$ligand.norm.lfc <- max(data[is.finite(data$ligand.norm.lfc),]$ligand.norm.lfc)*1.01
}
if (length(data[data$recept.norm.lfc == 'Inf',]$recept.norm.lfc) > 0){
data[data$recept.norm.lfc == 'Inf',]$recept.norm.lfc <- max(data[is.finite(data$recept.norm.lfc),]$recept.norm.lfc)*1.01
}
if (length(data[data$score == 'Inf',]$score) > 0){
data[data$score == 'Inf',]$score <- max(data[is.finite(data$score),]$score)*1.01
}
if (length(data[data$ligand.norm.lfc == '-Inf',]$ligand.norm.lfc) > 0){
data[data$ligand.norm.lfc == '-Inf',]$ligand.norm.lfc <- min(data[is.finite(data$ligand.norm.lfc),]$ligand.norm.lfc)*1.01
}
if (length(data[data$recept.norm.lfc == '-Inf',]$recept.norm.lfc) > 0){
data[data$recept.norm.lfc == '-Inf',]$recept.norm.lfc <- min(data[is.finite(data$recept.norm.lfc),]$recept.norm.lfc)*1.01
}
if (length(data[data$score == '-Inf',]$score) > 0){
data[data$score == '-Inf',]$score <- min(data[is.finite(data$score),]$score)*1.01
}
}
p1 <- ggplot(data,aes(x = vector, y = pair)) +
geom_tile(aes(fill = ligand.norm.lfc )) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_gradient2(low="blue",mid = 'grey',high="red",midpoint = 0) + ggtitle('Ligand Log2 Fold Change')
p2 <- ggplot(data,aes(x = vector, y = pair)) +
geom_tile(aes(fill = recept.norm.lfc )) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_gradient2(low="blue",mid = 'grey',high="red",midpoint = 0) + ggtitle('Receptor Log2 Fold Change')
p3 <- ggplot(data,aes(x = vector, y = pair)) +
geom_tile(aes(fill = score )) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_gradient2(low="blue",mid = 'grey',high="red",midpoint = 0) + ggtitle('Perturbation Score')
plot_grid(p1,p2,p3,nrow = 1)
}
# Initial Scoring Plot
pdf(file = 'Scoring Plot Demo.pdf',width = 50,height=8)
DifferentialScoringPlot(diff,min.score = 10,min.pct = 0.1,infinity.to.max = T)
dev.off()
# Initial Scoring Plot
pdf(file = 'Scoring Plot Demo.pdf',width = 50,height=8)
DifferentialScoringPlot(diff,min.score = 2,min.pct = 0.1,infinity.to.max = T)
dev.off()
DifferentialScoringPlot(diff,min.score = 2,min.pct = 0.1,infinity.to.max = T)
setwd("~/Documents/GitHub/connectome")
document()
require(roxygen2)
require(devtools)
setwd("~/Documents/GitHub/connectome")
document()
install_github('msraredon/connectome', ref = 'develop',auth_token = 'f7ea5d8790fe721ac0c9d5ef115d04068b19ed6d',force = T)
require(connectome)
DifferentialScoringPlot(diff,min.score = 2,min.pct = 0.1,infinity.to.max = T)
diff.up.up <- subset(diff,ligand.norm.lfc >0 & recept.norm.lfc > 0 )
CircosDiff(diff.up.up,min.score = 2,min.pct = 0.1lab.cex = 0.4)
CircosDiff(diff.up.up,min.score = 2,min.pct = 0.1,lab.cex = 0.4)
CircosDiff(diff.up.up,min.score = 2,min.pct = 0.1,lab.cex = 0.4)
library(ComplexHeatmap)
CircosDiff(diff.up.up,min.score = 2,min.pct = 0.1,lab.cex = 0.4)
diff.up.up <- subset(diff,ligand.norm.lfc >0 & recept.norm.lfc > 0 )
CircosDiff(diff.up.up,min.score = 2,min.pct = 0.1,lab.cex = 0.4)
