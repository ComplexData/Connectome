to.plot <- data.frame(test$Y)
colnames(to.plot) <- c('tSNE1','tSNE2')
rownames(to.plot) <- rownames(aff[1:n.cells,1:n.cells])
to.plot$idents <- as.character(idents[1:n.cells])
ggplot(to.plot,aes(x = tSNE1,y = tSNE2,color = idents)) + geom_point()
temp <- normalize_input(aff[1:n.cells,1:n.cells])
test <- Rtsne(temp,check_duplicates = F, Y_init = tsne.coords[1:n.cells,],is_distance = T)
to.plot <- data.frame(test$Y)
colnames(to.plot) <- c('tSNE1','tSNE2')
rownames(to.plot) <- rownames(aff[1:n.cells,1:n.cells])
to.plot$idents <- as.character(idents[1:n.cells])
ggplot(to.plot,aes(x = tSNE1,y = tSNE2,color = idents)) + geom_point()
# Make affinity matrix based on a single mechanism
aff1 <- lr.aff(object = rat, lig = 'Rspo1', rec = 'Lgr5')
aff2 <- lr.aff(object = rat, lig = 'Vegfa', rec = 'Kdr')
aff3 <- lr.aff(object = rat, lig = 'Sema3e', rec = 'Plxnd1')
require(purrr)
x = list(aff1, aff2,aff3)
aff = reduce(x, `+`)
# Get cell idents
idents <- Idents(rat)
require(Rtsne)
require(ggplot2)
n.cells <- 2000
temp <- normalize_input(aff[1:n.cells,1:n.cells])
test <- Rtsne(temp,check_duplicates = F, Y_init = tsne.coords[1:n.cells,],is_distance = T)
to.plot <- data.frame(test$Y)
colnames(to.plot) <- c('tSNE1','tSNE2')
rownames(to.plot) <- rownames(aff[1:n.cells,1:n.cells])
to.plot$idents <- as.character(idents[1:n.cells])
ggplot(to.plot,aes(x = tSNE1,y = tSNE2,color = idents)) + geom_point()
# Make affinity matrix based on a set of mechanisms?
load("~/Documents/GitHub/connectome/data/ncomms8866_rat.rda")
pairs <- subset(ncomms8866_rat,Ligand.ApprovedSymbol %in% rownames(rat) &
Receptor.ApprovedSymbol %in% rownames(rat))
aff <-  normalize_input(lr.aff(object = rat,
lig = pairs$Ligand.ApprovedSymbol[1],
rec = pairs$Receptor.ApprovedSymbol[1]))
for (i in 2:length(pairs)){
temp <- normalize_input(lr.aff(object = rat,
lig = pairs$Ligand.ApprovedSymbol[i],
rec = pairs$Receptor.ApprovedSymbol[i]))
aff <- purrr::reduce(list(temp,aff), `+`)
}
# Get cell idents
idents <- Idents(rat)
require(Rtsne)
require(ggplot2)
n.cells <- 2000
temp <- aff[1:n.cells,1:n.cells]
temp <- normalize_input(temp)
test <- Rtsne(temp,check_duplicates = F, Y_init = tsne.coords[1:n.cells,],is_distance = T)
to.plot <- data.frame(test$Y)
colnames(to.plot) <- c('tSNE1','tSNE2')
rownames(to.plot) <- rownames(aff[1:n.cells,1:n.cells])
to.plot$idents <- as.character(idents[1:n.cells])
ggplot(to.plot,aes(x = tSNE1,y = tSNE2,color = idents)) + geom_point()
x = list(aff1, aff2,aff3)
aff = reduce(x, `+`)
# Get cell idents
idents <- Idents(rat)
require(Rtsne)
require(ggplot2)
n.cells <- 2000
temp <- normalize_input(aff[1:n.cells,1:n.cells])
test <- Rtsne(temp,check_duplicates = F,is_distance = T)
to.plot <- data.frame(test$Y)
colnames(to.plot) <- c('tSNE1','tSNE2')
rownames(to.plot) <- rownames(aff[1:n.cells,1:n.cells])
to.plot$idents <- as.character(idents[1:n.cells])
ggplot(to.plot,aes(x = tSNE1,y = tSNE2,color = idents)) + geom_point()
rat
require(connectome)
?CreateConnectome
rat.con <- CreateConnectome(rat,species = 'rat')
rat.con <- CreateConnectome(rat,species = 'rat',p.values = F)
View(rat.con)
rat.con <- rat.con[21:22,1:20]
rat.con <- CreateConnectome(rat,species = 'rat',p.values = F)
rat.con2 <- rat.con[,c(21:22,1:20)]
View(rat.con2)
rat.con2 <- FilterConnectome(rat.con2)
View(rat.con2)
NetworkPlot(rat.con2,features = 'Vegfa')
NetworkPlot(rat.con2,features = 'Shh')
CellCellScatter(rat.con2,cell.1 = 'ATI',cell.2 = 'EC_cap')
SignalScatter(rat.con2,features = 'Vegfa')
ModalDotPlot(rat.con2)
ModalDotPlot(rat.con2,modes.include = c('VEGF','TGFB'))
rat.con3 <-rat.con
ModalDotPlot(rat.con,modes.include = c('VEGF','TGFB'))
FeaturePlot(rat,'Vegfd')
load("~/Documents/GitHub/connectome/data/translator.rda")
View(translator)
View(translator)
require(devtools)
install_github('msraredon/connectome')
install_github('msraredon/Connectome')
install_github('msraredon/Connectome',auth_token = '9a80291e5b610bd1917997fd3f843f1b1bee9c79')
?install_github
install_github(msraredon/Connectome,auth_token = '9a80291e5b610bd1917997fd3f843f1b1bee9c79')
install_github(msraredon/connectome,auth_token = '9a80291e5b610bd1917997fd3f843f1b1bee9c79')
install_github('msraredon/Connectome',auth_token = 'd9990a012af7a61c09e8057fb0c5015dcd440481')
load("~/Box Sync/BEF/Native Reference Object/high.res.adult.rat.2-28-2020.Robj")
UMAPPlot(high.res.adult.rat)
UMAPPlot(high.res.adult.rat,label = T)
UMAPPlot(high.res.adult.rat,label = T) + NoLegend()
rm(high.res.adult.rat)
load("~/Box Sync/Niklason Tissue Library/NN Rat Lungs/NN Timecourse v4.1 (Individual, Increased nUMI upper bound)/data.sub.v4.1.Robj")
data.sub[[1]]
table(Idents(data[[1]]))
table(Idents(data.sub[[1]]))
table(Idents(data.sub[[2]]))
test <- CreateConnectome(rat,p.values = F)
test <- CreateConnectome(rat,p.values = F,species = 'rat')
test <- tes[,c('source','target',colnames(test)[!(colnames(test) %in% c('source','target'))])]
test <- test[,c('source','target',colnames(test)[!(colnames(test) %in% c('source','target'))])]
View(test)
install_github('msraredon/connectome',auth_token = '9a80291e5b610bd1917997fd3f843f1b1bee9c79')
install_github('msraredon/connectome',auth_token = '9a80291e5b610bd1917997fd3f843f1b1bee9c79')
install_github(msraredon/connectome,auth_token = '9a80291e5b610bd1917997fd3f843f1b1bee9c79')
install_github('msraredon/connectome',auth_token = '9a80291e5b610bd1917997fd3f843f1b1bee9c79')
install_github('msraredon/connectome',auth_token = '9a80291e5b610bd1917997fd3f843f1b1bee9c79')
install_github('msraredon/connectome',auth_token = 'e6003eb12f256ecd0abf8909b37226a030eedfe2')
test <- CreateConnectome(rat,p.values = F,species = 'rat')
head(test)
requure(connectome)
library(connectome)
test <- CreateConnectome(rat,p.values = F,species = 'rat')
head(test)
require(devtools)
install_github('msraredon/connectome', ref = 'master',auth_token = 'f7ea5d8790fe721ac0c9d5ef115d04068b19ed6d',force = T)
library(connectome)
?CreateConnectome
?FilterConnectome
load("~/Box Sync/BEF/Lung Data/BEF15/scRNAseq/BEF15.Robj")
load("~/Box Sync/BEF/Lung Data/BEF14/scRNAseq/BEF14.Robj")
BEF14.con.demo <- CreateConnectome(BEF14,species = 'rat',p.values = F)
BEF14 <- ScaleData(BEF14)
table(Idents(BEF14))
require(connectome)
BEF14.con.demo <- CreateConnectome(BEF14,species = 'rat',p.values = F)
BEF14 <- ScaleData(BEF14,features = rownames(BEF14))
table(Idents(BEF14))
require(connectome)
BEF14.con.demo <- CreateConnectome(BEF14,species = 'rat',p.values = F)
BEF14.con <- FilterConnectome(BEF14.con.demo,min.pct = 0.1)
NetworkPlot(BEF14.con,'Vegfa')
ModalDotPlot(BEF14.con)
ModalDotPlot(BEF14.con,modes.include = c('VEGF','WNT','Semaphorins','NOTCH','FGF'))
CellCellScatter(BEF14.con,cell.1 = 'Epithelium',cell.2 = 'Endothelium')
SignalScatter(BEF14.con, features = c('Wnt3a','Wnt5a','Wnt4'),label.threshold = 1)
SignalScatter(BEF14.con, features = c('Vegfa'),label.threshold = 1)
# Differential demo
BEF14.con <- CreateConnectome(BEF14,species = 'rat')
# Differential demo
BEF14.con <- CreateConnectome(BEF14,species = 'rat',p.values = F)
BEF15.con <- CreateConnectome(BEF15,species = 'rat',p.values = F)
BEF15 <- ScaleData(BEF15,features = rownames(BEF15))
BEF15.con <- CreateConnectome(BEF15,species = 'rat',p.values = F)
DifferentialConnectome(BEF14.con,BEF15.con)
diff <- DifferentialConnectome(BEF14.con,BEF15.con)
diff <- DifferentialConnectome(BEF15.con,BEF14.con)
View(diff)
DifferentialScoringPlot(diff)
?CreateConnectome
DifferentialScoringPlot(diff)
require(permute)
DifferentialScoringPlot(diff)
data <-diff
# Setup vector column
data$vector <- paste(data$source,data$target,sep = ' - ')
View(data)
min.score = NULL
# Subset based on min.score
data <- subset(data,score > min.score)
# Setup vector column
data$vector <- paste(data$source,data$target,sep = ' - ')
# Subset based on min.score
if (!is.null(min.score)){
data <- subset(data,score > min.score)
}
p1 <- ggplot(data,aes(x = vector, y = pair)) +
geom_tile(aes(fill = ligand.norm.lfc )) +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_gradient2(low="blue",mid = 'grey',high="red",midpoint = 0) + ggtitle('Ligand Log2 Fold Change')
p2 <- ggplot(data,aes(x = vector, y = pair)) +
geom_tile(aes(fill = recept.norm.lfc )) +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_gradient2(low="blue",mid = 'grey',high="red",midpoint = 0) + ggtitle('Receptor Log2 Fold Change')
p3 <- ggplot(data,aes(x = vector, y = pair)) +
geom_tile(aes(fill = score )) +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_gradient2(low="blue",mid = 'grey',high="red",midpoint = 0) + ggtitle('Perturbation Score')
plot_grid(p1,p2,p3,nrow = 1)
data <- diff
# Setup vector column
data$vector <- paste(data$source,data$target,sep = ' - ')
# Subset based on min.score
if (!is.null(min.score)){
data <- subset(data,score > min.score)
}
p1 <- ggplot(data,aes(x = vector, y = pair)) +
geom_tile(aes(fill = ligand.norm.lfc )) +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_gradient2(low="blue",mid = 'grey',high="red",midpoint = 0) + ggtitle('Ligand Log2 Fold Change')
p2 <- ggplot(data,aes(x = vector, y = pair)) +
geom_tile(aes(fill = recept.norm.lfc )) +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_gradient2(low="blue",mid = 'grey',high="red",midpoint = 0) + ggtitle('Receptor Log2 Fold Change')
p3 <- ggplot(data,aes(x = vector, y = pair)) +
geom_tile(aes(fill = score )) +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_gradient2(low="blue",mid = 'grey',high="red",midpoint = 0) + ggtitle('Perturbation Score')
plot_grid(p1,p2,p3,nrow = 1)
setwd("~/Documents/GitHub/connectome")
document()
install_github('msraredon/connectome', ref = 'master',auth_token = 'f7ea5d8790fe721ac0c9d5ef115d04068b19ed6d',force = T)
diff <- DifferentialConnectome(BEF15.con,BEF14.con)
require(connectome)
DifferentialConnectome()
DifferentialConnectome
diff <- DifferentialConnectome(BEF15.con,BEF14.con)
DifferentialScoringPlot(diff,min.score = 1)
diff.sub <- subset(diff,pct.source.1 > 0.05 & pct.source.2 > 0.05 & pct.target.1 > 0.05 & pct.target.2 > 0.05 &)
diff.sub <- subset(diff,pct.source.1 > 0.05 & pct.source.2 > 0.05 & pct.target.1 > 0.05 & pct.target.2 > 0.05 )
View(diff.sub)
diff <- DifferentialConnectome(BEF15.con,BEF14.con,min.pct = 0.001)
diff <- DifferentialConnectome(BEF15.con,BEF14.con,min.pct = 0.01)
View(diff)
diff.sub <- subset(diff,pct.source.1 > 0.05 & pct.source.2 > 0.05 & pct.target.1 > 0.05 & pct.target.2 > 0.05 )
DifferentialScoringPlot(diff.sub,min.score = 3)
DifferentialScoringPlot(diff.sub,min.score = 2)
DifferentialScoringPlot(diff.sub,min.score = 1)
diff <- DifferentialConnectome(BEF15.con,BEF14.con)
diff.sub <- subset(diff,pct.source.1 > 0.05 & pct.source.2 > 0.05 & pct.target.1 > 0.05 & pct.target.2 > 0.05 )
DifferentialScoringPlot(diff.sub)
View(diff.sub)
.017*.2636
.096*.0474
DifferentialScoringPlot(diff.sub,min.score = 0.1)
ggplot(diff.sub,aes(diff.sub$score)) + geom_density()
DifferentialScoringPlot(diff.sub,min.score = 0.5)
unique(master_sub$mode)
unique(BEF14$mode)
unique(BEF14.con$mode)
class(unique(BEF14.con$mode))
install_github('msraredon/connectome', ref = 'master',auth_token = 'f7ea5d8790fe721ac0c9d5ef115d04068b19ed6d',force = T)
ModalDotPlot()
ModalDotPlot
setwd("~/Documents/GitHub/connectome")
document()
setwd("~/Documents/GitHub/connectome")
document()
setwd("~/Documents/GitHub/connectome")
document()
install_github('msraredon/connectome', ref = 'master',auth_token = 'f7ea5d8790fe721ac0c9d5ef115d04068b19ed6d',force = T)
library(connectome)
ModalDotPlot()
ModalDotPlot
ModalDotPlot(BEF14.con,modes.include = c('VEGF','WNT','Semaphorins','NOTCH','FGF'))
ModalDotPlot(BEF14.con)
View(BEF14.con)
setwd("~/Documents/GitHub/connectome")
document()
install_github('msraredon/connectome', ref = 'master',auth_token = 'f7ea5d8790fe721ac0c9d5ef115d04068b19ed6d',force = T)
library(connectome)
ModalDotPlot
NetworkPlot(BEF14.con,'Vegfa')
ModalDotPlot(BEF14.con)
ModalDotPlot(BEF15.con)
ModalDotPlot(BEF14.con,modes.include = 'WNT')
nodes.include = NULL
modes.include = 'WNT'
cols.use = NULL
weight.attribute = 'weight_sc'
connectome <- BEF14.con
require(igraph)
require(ggplot2)
require(cowplot)
require(dplyr)
master <- connectome
# Subset on nodes (cell types) of interest
if (!is.null(nodes.include)){
if (length(nodes.include) == 1){
master_sub <- subset(master, source == nodes.include & target == nodes.include)
}else{
master_sub <- subset(master, source %in% nodes.include & target %in% nodes.include)
}
}else{
master_sub <- master
}
# Subset on modes (signaling families) of interest
if (!is.null(modes.include)){
if (length(modes.include) == 1){
master_sub <- subset(master_sub, mode == modes.include)
}else{
master_sub <- subset(master_sub, mode %in% modes.include)
}
}else{
master_sub <- master_sub
}
# Set up to plot ModalDotPlot
modes <- unique(master_sub$mode)
cells <- unique(union(levels(master_sub$source),levels(master_sub$target)))
modes
modes[[4]]
df <- data.frame()
for (i in 1:length(modes)){
temp <- subset(master_sub,mode == modes[[i]])
net <- graph_from_data_frame(temp, directed = T)
hub <- hub_score(net,weights = temp[,weight.attribute], scale = T)$vector
auth <- authority_score(net,weights = temp[,weight.attribute], scale = T)$vector
for (j in 1:length(cells)){
temp2 <- subset(temp,source == cells[[j]])
wt.source <- sum(temp2[,weight.attribute])
temp2 <- subset(temp,target == cells[[j]])
wt.sink <- sum(temp2[,weight.attribute])
row <- data.frame(mode = modes[[i]], cells = cells[[j]], hub.score = hub[cells[[j]]], auth.score = auth[cells[[j]]], wt.source = wt.source, wt.sink = wt.sink,row.names = NULL)
df <- rbind(df,row)
}
}
View(df)
df <- data.frame()
temp <- subset(master_sub,mode == modes[[i]])
modes[[i]]
net <- graph_from_data_frame(temp, directed = T)
net
E(net)
hub <- hub_score(net,weights = temp[,weight.attribute], scale = T)$vector
temp[,weight.attribute]
auth <- authority_score(net,weights = temp[,weight.attribute], scale = T)$vector
for (j in 1:length(cells)){
temp2 <- subset(temp,source == cells[[j]])
wt.source <- sum(temp2[,weight.attribute])
temp2 <- subset(temp,target == cells[[j]])
wt.sink <- sum(temp2[,weight.attribute])
row <- data.frame(mode = modes[[i]], cells = cells[[j]], hub.score = hub[cells[[j]]], auth.score = auth[cells[[j]]], wt.source = wt.source, wt.sink = wt.sink,row.names = NULL)
df <- rbind(df,row)
}
for (i in 1:length(modes)){
temp <- subset(master_sub,mode == modes[[i]])
net <- graph_from_data_frame(temp, directed = T)
hub <- hub_score(net,weights = temp[,weight.attribute], scale = T)$vector
auth <- authority_score(net,weights = temp[,weight.attribute], scale = T)$vector
for (j in 1:length(cells)){
temp2 <- subset(temp,source == cells[[j]])
wt.source <- sum(temp2[,weight.attribute])
temp2 <- subset(temp,target == cells[[j]])
wt.sink <- sum(temp2[,weight.attribute])
row <- data.frame(mode = modes[[i]], cells = cells[[j]], hub.score = hub[cells[[j]]], auth.score = auth[cells[[j]]], wt.source = wt.source, wt.sink = wt.sink,row.names = NULL)
df <- rbind(df,row)
}
}
# Plots
p1 <- ggplot(df,aes(mode,wt.source,color = reorder(cells)))+
geom_point(size = df$hub.score*10,alpha = 0.6)+
coord_flip()+ theme(legend.position="none") + ggtitle('Outgoing edgeweight')
p2 <- ggplot(df,aes(mode,wt.sink,color = reorder(cells)))+
geom_point(size = df$auth.score*10,alpha = 0.6)+
coord_flip()+ theme(legend.position="none") + ggtitle('Incoming edgeweight')
# Modify colors if desired
if (!is.null(cols.use)){
p1 <- p1 + scale_colour_manual(values = cols.use)
p2 <- p2 + scale_colour_manual(values = cols.use)
}
# Put legend on bottom
legend <- get_legend(
p1 +
guides(color = guide_legend(nrow = 2,byrow=TRUE,override.aes = list(size=5))) +
theme(legend.position = "bottom")
)
# Assemble plot
plot.top <- plot_grid(p1, p2,nrow = 1)
plot_grid(plot.top,legend,ncol = 1,rel_heights = c(1, .1))
temp[,weight.attribute]
BEF14.con <- FilterConnectome(BEF14.con,min.pct = 0.1)
master <- connectome
# Subset on nodes (cell types) of interest
if (!is.null(nodes.include)){
if (length(nodes.include) == 1){
master_sub <- subset(master, source == nodes.include & target == nodes.include)
}else{
master_sub <- subset(master, source %in% nodes.include & target %in% nodes.include)
}
}else{
master_sub <- master
}
# Subset on modes (signaling families) of interest
if (!is.null(modes.include)){
if (length(modes.include) == 1){
master_sub <- subset(master_sub, mode == modes.include)
}else{
master_sub <- subset(master_sub, mode %in% modes.include)
}
}else{
master_sub <- master_sub
}
# Set up to plot ModalDotPlot
modes <- unique(master_sub$mode)
cells <- unique(union(levels(master_sub$source),levels(master_sub$target)))
df <- data.frame()
temp <- subset(master_sub,mode == modes[[i]])
net <- graph_from_data_frame(temp, directed = T)
hub <- hub_score(net,weights = temp[,weight.attribute], scale = T)$vector
auth <- authority_score(net,weights = temp[,weight.attribute], scale = T)$vector
?hub_score
hub <- igraph::hub_score(net,weights = temp[,weight.attribute], scale = T)$vector
net <- graph_from_data_frame(temp, directed = T)
net
NetworkPlot(temp)
NetworkPlot(temp2)
View(temp)
View(BEF14.con)
connectome <- BEF14.con
master <- connectome
# Subset on nodes (cell types) of interest
if (!is.null(nodes.include)){
if (length(nodes.include) == 1){
master_sub <- subset(master, source == nodes.include & target == nodes.include)
}else{
master_sub <- subset(master, source %in% nodes.include & target %in% nodes.include)
}
}else{
master_sub <- master
}
# Subset on modes (signaling families) of interest
if (!is.null(modes.include)){
if (length(modes.include) == 1){
master_sub <- subset(master_sub, mode == modes.include)
}else{
master_sub <- subset(master_sub, mode %in% modes.include)
}
}else{
master_sub <- master_sub
}
# Set up to plot ModalDotPlot
modes <- unique(master_sub$mode)
cells <- unique(union(levels(master_sub$source),levels(master_sub$target)))
df <- data.frame()
temp <- subset(master_sub,mode == modes[[i]])
net <- graph_from_data_frame(temp, directed = T)
hub <- igraph::hub_score(net,weights = temp[,weight.attribute], scale = T)$vector
auth <- authority_score(net,weights = temp[,weight.attribute], scale = T)$vector
for (j in 1:length(cells)){
temp2 <- subset(temp,source == cells[[j]])
wt.source <- sum(temp2[,weight.attribute])
temp2 <- subset(temp,target == cells[[j]])
wt.sink <- sum(temp2[,weight.attribute])
row <- data.frame(mode = modes[[i]], cells = cells[[j]], hub.score = hub[cells[[j]]], auth.score = auth[cells[[j]]], wt.source = wt.source, wt.sink = wt.sink,row.names = NULL)
df <- rbind(df,row)
}
load("~/Box Sync/Niklason Tissue Library/Adult Rat Lungs/Adult Rat (10X)/rat_cca 2018-08-04 .Robj")
rat <- UpdateSeuratObject(rat_cca)
FeaturePlot(rat,'Hgf')
FeaturePlot(rat,'Met')
FeaturePlot(rat,'Rspo1')
FeaturePlot(rat,'Lgr5')
FeaturePlot(rat,'Met')
rat_con <- CreateConnectome(rat,species = 'rat',p.values = F)
rat_con <- FilterConnectome(rat.con)
rat_con <- FilterConnectome(rat_con)
save(rat_con,file = 'rat_connectome.Robj')
getwd()
# Customize function
NearestNeighborModal <- function (connectome.list, NOI, mode_plot = "Growth factors")
{
nn_total <- data.frame()
for (n in 1:length(connectome.list)) {
master_func <- connectome.list[[n]]
master_func$wt <- master_func$weight_sc
master_sub <- subset(master_func, source %in% NOI & target %in%
NOI)
modes <- unique(master_sub$mode)
cells <- unique(union(master_sub$source, master_sub$target))
df <- data.frame()
for (i in 1:length(modes)) {
temp <- subset(master_sub, mode == modes[[i]])
net <- graph_from_data_frame(temp, directed = T)
hub <- hub_score(net, weights = temp$wt, scale = T)$vector
auth <- authority_score(net, weights = temp$wt)$vector
for (j in 1:length(cells)) {
temp2 <- subset(temp, source == cells[[j]])
wt.source <- sum(temp2$wt)
temp2 <- subset(temp, target == cells[[j]])
wt.sink <- sum(temp2$wt)
row <- data.frame(mode = modes[[i]], cells = cells[[j]],
hub.score = hub[cells[[j]]], auth.score = auth[cells[[j]]],
wt.source = wt.source, wt.sink = wt.sink, row.names = NULL,
species = master_sub$species[1])
df <- rbind(df, row)
}
}
nn_total <- rbind(nn_total, df)
}
p1 <- ggplot(subset(nn_total, mode == mode_plot), aes(species,
wt.source, color = reorder(cells))) + geom_point(size = subset(nn_total,
mode == mode_plot)$hub.score * 10, alpha = 0.6) +
guides(colour = guide_legend(override.aes = list(size = 10)))+
scale_y_continuous(trans='log10')+
geom_text(data=subset(nn_total, mode == mode_plot) %>% group_by(species) %>% top_n(1,hub.score),aes(species,wt.source,label=cells))
p2 <- ggplot(subset(nn_total, mode == mode_plot), aes(species,
wt.sink, color = reorder(cells))) + geom_point(size = subset(nn_total,
mode == mode_plot)$auth.score * 10, alpha = 0.6) +
guides(colour = guide_legend(override.aes = list(size = 10)))+
scale_y_continuous(trans='log10')+
geom_text(data=subset(nn_total, mode == mode_plot) %>% group_by(species) %>% top_n(1,auth.score),aes(species,wt.sink,label=cells))
print(plot_grid(p1, p2))
}
install_github('msraredon/connectome', ref = 'develop',auth_token = 'f7ea5d8790fe721ac0c9d5ef115d04068b19ed6d',force = T)
setwd("~/Documents/GitHub/connectome")
document()
